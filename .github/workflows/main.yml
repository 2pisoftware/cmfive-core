# This is a basic workflow to help you get started with Actions
name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
        with:
          repository: '2pisoftware/cmfive-boilerplate'
          ref: 'feature/cicd'
      
      - name: Cache composer output
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: system/composer
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: .build/setup/venv
          key: ${{ runner.os }}-pip2-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip2-

      # Build cmfive containers
      - name: Build cmfive
        run: |
          cp config.php.example config.php
          cd .build/setup
          python3 -m venv venv;
          source venv/bin/activate;
          pip3 install -r requirements.txt;
          python3 install.py provision-test;
          docker start selenium314
          cd ../../test/.install
          ./install.sh
      - name: Test cmfive
        run: |
          docker exec nginx-php7.2 php cmfive.php testDB setup
          docker exec nginx-php7.2 php cmfive.php tests unit all
          docker exec nginx-php7.2 php cmfive.php test run all silent
