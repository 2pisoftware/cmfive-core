# This is a basic workflow to help you get started with Actions
name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
        with:
          repository: '2pisoftware/cmfive-boilerplate'
          ref: 'feature/cicd'
      
      - name: Cache composer output
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: system/composer
          key: ${{ runner.os }}-composer-${{ hashFiles('system/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: .build/setup/venv
          key: ${{ runner.os }}-pip2-${{ hashFiles('.build/setup/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip2-
      
      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('.build/environment/test/Dockerfile') }}
      - run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000
      - run: docker pull localhost:5000/cmfive || true
      - run: docker build ./.build/environment/test/ -t cmfive --cache-from=localhost:5000/cmfive
      - run: docker tag cmfive localhost:5000/cmfive && docker push localhost:5000/cmfive || true
        if: steps.cache.outputs.cache-hit != 'true'
            
      # Build cmfive containers
      - name: Build cmfive
        run: |
          cp config.php.example config.php
          cd .build/setup
          python3 -m venv venv;
          source venv/bin/activate;
          pip3 install -r requirements.txt;
          python3 install.py provision-test;
          docker start selenium314
      
      - name: Test cmfive
        run: |
          docker exec nginx-php7.2 bash -c "php cmfive.php testDB setup 2>&1 > /dev/null; exit \$?"
          docker exec nginx-php7.2 bash -c "php cmfive.php tests unit all; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Unit tests failed"
            exit 1
          fi
          docker exec nginx-php7.2 bash -c "php cmfive.php tests run '' silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Acceptance tests failed"
            exit 1
          fi
