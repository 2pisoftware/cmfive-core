name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop, master ]

  workflow_dispatch:

jobs:
  # Lint
  php-codesniffer:
    name: PHP CS
    runs-on: ubuntu-18.04
    steps:
    - name: Get phpcs
      run: wget https://raw.githubusercontent.com/2pisoftware/cmfive-boilerplate/master/phpcs.xml
    - name: Codesniffer
      uses: pipeline-components/php-codesniffer@v0.12.3
      with:
        options: -s -p --colors --extensions=php --runtime-set testVersion 7.4
  # Test
  run_test:
    # Checkout Boilerplate
    name: Unit/Acceptance tests
    runs-on: ubuntu-18.04
    needs: [ php-codesniffer ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: '2pisoftware/cmfive-boilerplate'
          ref: 'hotfix/CIAction'

      # # Cache
      # - name: Cache Python Virtual Environment
      #   uses: actions/cache@v2
      #   id: pip
      #   with:
      #     path: .build/setup/venv
      #     key: ${{ runner.os }}-pip-${{ hashFiles('.build/setup/requirements.txt') }}

      # - name: Cache cmfive Docker Image
      #   uses: actions/cache@v2
      #   id: cmfive-docker-image
      #   with:
      #     path: /tmp/docker-registry
      #     key: docker-registry-${{ hashFiles('.build/environment/test/config/docker/Dockerfile.template') }}

      # Pre-requsites Prepare Runtime
      # - name: Provision Python Virtual Environment
      #   if: steps.pip.outputs.cache-hit != 'true'
      #   run: |
      #     cd .build/setup;
      #     python3 -m venv venv;
      #     source venv/bin/activate;
      #     pip install -r requirements.txt;

      # - name: Prepare cmfive Test Environment
      #   run: |
      #     cd .build/setup;
      #     source venv/bin/activate;
      #     python install.py prime-environment test

      # - name: Prepare Docker Registry
      #   run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      # - name: Build and Push Image to Docker Registry
      #   if: steps.cmfive-docker-image.outputs.cache-hit != 'true'
      #   run: |
      #     docker build ./.build/environment/test/ -t cmfive --cache-from=localhost:5000/cmfive;
      #     docker tag cmfive localhost:5000/cmfive && docker push localhost:5000/cmfive || true;

      # - name: Pull Image from Docker Registry
      #   run: docker pull localhost:5000/cmfive || true

      # # Pre-requsites Prepare Cmfive Environment
      # - name: Setup cmfive Test Environment
      #   run: |
      #     echo ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}};
      #     cd .build/setup;
      #     source venv/bin/activate;
      #     python install.py --verbose debug provision-test --cmfive_core_ref ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}};
      #     docker start selenium314;

      - name: Run docker compose up
        run: |
          docker-compose up -d

      - name: Inject configs into cmfive Test Environment
        run: |
          cp config.php.example config.php
          sed -i -e 's/<username>/cmfive/g' config.php
          sed -i -e 's/<password>/cmfive/g' config.php
          sed -i -e 's/<database>/cmfive/g' config.php
          sed -i -e 's/"testrunner"  => "",/"testrunner"  => "ENABLED",/g' config.php
          echo "Config::set('report.database', ['hostname' => 'mysql-5.7', 'username' => 'cmfive', 'password' => 'cmfive', 'database' => 'cmfive', 'driver' => 'mysql']);" >> config.php;
          echo "Config::set('core_template.foundation.reveal.animation_speed', 0);" >> config.php;
          echo "Config::set('core_template.foundation.reveal.animation', 'none');" >> config.php;
          echo "Config::set('tests', ['testrunner'  => 'ENABLED' , 'config' => '' , 'yaml' => ['- WebDriver:' => ['url' => 'http://webapp:3000', 'browser' => 'chrome', 'wait' => '60', 'host' => 'selenium314', 'port' => '4444', 'capabilities' => ['acceptInsecureCerts' => true, 'goog:chromeOptions' => 'w3c: false']], '- Db:' => ['dsn' => 'mysql:host=mysql-5.7:3306;dbname=cmfive', 'user' => 'cmfive', 'password' => 'cmfive'], '- Asserts:' => '']]);" >> config.php;
          docker start selenium314;
          docker start mysql-5.7

      - name: Prepare cmfive Test Database
        run: |
          docker exec mysql-5.7 bash -c 'mysql -u root -proot -e "CREATE DATABASE cmfive;"';
          docker exec mysql-5.7 bash -c 'mysql -u root -proot -e "create user cmfive@\'%\' identified by \'cmfive\';"';
          docker exec mysql-5.7 bash -c 'mysql -u root -proot -e "grant all privileges on cmfive.* to cmfive@\'%\';"';
          docker exec mysql-5.7 bash -c 'mysql -u root -proot -e "flush privileges;"';
          docker exec mysql-5.7 bash -c "php cmfive.php testDB setup; exit \$?"

      # Run Unit Tests
      - name: "Run unit tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests unit all; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Admin module tests failed"
          fi

      # Run Acceptance Tests
      - name: "Run admin module tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests module admin silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Admin module tests failed"
          fi
      - name: "Run channels module tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests module channels silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Channels module tests failed"
          fi
      - name: "Run inbox module tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests module inbox silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Inbox module tests failed"
          fi
      - name: "Run report module tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests module report silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Report module tests failed"
          fi
      - name: "Run tag module tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests module tag silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Tag module tests failed"
          fi
      - name: "Run task module tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests module task silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Task module tests failed"
          fi
      - name: "Run timelog module tests"
        run: |
          docker exec nginx-php7.4 bash -c "php cmfive.php tests module timelog silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Timelog module tests failed"
          fi

      # Store Test Results
      - name: Test results
        if: ${{ failure() }} || ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: test/Codeception/tests/_output/
          retention-days: 5
