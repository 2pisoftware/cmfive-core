name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop, master ]

  workflow_dispatch:
env:
  TARGET_PHP: 8.1
  TARGET_MYSQL: 8
  DB_HOST: mysql-8
  DB_PORT: 3306
  DB_USERNAME: cmfive_test
  DB_PASSWORD: cmfive_test
  DB_DATABASE: cmfive_test
  PLAYWRIGHT_MODULES: "admin channel form tag report task timelog"

jobs:
  # Lint
  php-codesniffer:
    name: PHP CS
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        php_version: [7.4, 8.0, 8.1, 8.3]
    steps:
    - name: Get phpcs
      run: wget https://raw.githubusercontent.com/2pisoftware/cmfive-boilerplate/master/phpcs.xml
    - name: Codesniffer
      uses: pipeline-components/php-codesniffer@v0.31.0
      with:
        options: -s -p --colors --extensions=php --runtime-set testVersion ${{matrix.php_version}}

  # Test
  run_test:
    # Checkout Boilerplate
    name: Unit/Acceptance tests
    runs-on: ubuntu-22.04
    needs: [ php-codesniffer]
    strategy:
      matrix:
        node_version: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: core

      - name: Checkout Boilerplate
        uses: actions/checkout@v4
        with:
          repository: '2pisoftware/cmfive-boilerplate'
          ref: 'develop'
          path: boilerplate

      # Define composer cache
      - name: Composer cache
        uses: actions/cache@v4
        with:
          path: .composer
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Compile the theme
        run: |
          docker run node:18-alpine \
            -v ${{ github.workspace }}/core/system/templates/base:/var/www/html/system/templates/base \
            sh -c "cd /var/www/html/system/templates/base && npm install && npm run production"

      # Pre-requisites Prepare Cmfive Environment
      - name: Pull Docker images
        run: |
          docker pull ghcr.io/2pisoftware/cmfive:develop
          docker pull mysql:8

      - name: Start containers
        run: |
          # Create MySQL 8 container
          echo "Starting MySQL 8"
          docker run --name mysql-8 -d -p 3306:3306 \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=cmfive_test \
            -e MYSQL_USER=cmfive_test \
            -e MYSQL_PASSWORD=cmfive_test \
            mysql:8

          # Wait for MySQL to start
          echo "Waiting for MySQL to start"
          time=0
          while ! docker exec mysql-8 mysqladmin ping -ucmfive_test -pcmfive_test --silent; do
            sleep 1
            time=$((time+1))
            if [ $time -gt 60 ]; then
              echo "MySQL failed to start"
              exit 1
            fi
          done

          # Create Cmfive container
          echo "Starting Cmfive"
          docker run --name cmfive -d -p 80:80 \
            -v ${{ github.workspace }}/core/system:/var/www/html/system \
            -v ${{ github.workspace }}/boilerplate/.codepipeline/test_agent/configs/test_agent-config.php:/var/www/html/config.php \
            -v ${{ github.workspace }}/boilerplate/test:/var/www/html/test \
            ghcr.io/2pisoftware/cmfive:develop

          # Wait for cmfive healthcheck to be healthy
          echo "Waiting for Cmfive to start"
          time=0
          while [ "$(docker inspect -f '{{.State.Health.Status}}' cmfive)" != "healthy" ]; do
            sleep 1
            time=$((time+1))
            if [ $time -gt 60 ]; then
              echo "Cmfive failed to start"
              exit 1
            fi
          done

      # Load composer cache
      - name: Load composer cache
        if: runner.os == 'Linux'
        run: |
          if [ -d .composer ]; then
            docker cp .composer cmfive:/home/cmfive/
          fi

      # Pre-requisites Prepare Cmfive Environment
      - name: Setup cmfive Test Environment
        run: |
          docker exec -t cmfive sh -c "chmod -R ugo=rwX /var/www/html*"

      - name: Inject configs into cmfive Test Environment
        run: |
          echo "Inheriting test_agent config from PIPELINE"

          # Define extra config
          CONFIG='
          Config::append(\"tests\", [\"testrunner\" => \"ENABLED\"]);
          '

          # Write extra config to cmfive container
          docker exec -t cmfive sh -c "echo \"$CONFIG\" >> /var/www/html/config.php"

      - name: Prepare cmfive Test Backend
        run: |
          # Install packages required for the tests
          docker exec -u root -t cmfive sh -c \
            "apk add --no-cache php81-dom php81-xmlwriter php81-tokenizer";

          # Change owner of the test directory
          docker exec -u root -t cmfive sh -c \
            "chown -R cmfive:cmfive /var/www/html/test";

          # Install Codeception
          docker exec -u cmfive cmfive sh -c \
            "cd /var/www/html/test/ && sh ./.install/install.sh"

      - name: Prepare cmfive Test DB
        run: |
          docker exec -t cmfive sh -c "DB_HOST=mysql-8 DB_USERNAME=cmfive_test DB_PASSWORD=cmfive_test DB_DATABASE=cmfive_test DB_PORT=3306 php cmfive.php testDB setup; exit \$?";
        
      # Build new layout
      - uses: actions/setup-node@v4
        with:
            node-version: ${{ matrix.node_version }}
        
      # Run Unit Tests
      - name: "Run unit tests"
        run: |
          docker exec cmfive sh -c "DB_HOST=mysql-8 DB_USERNAME=cmfive_test DB_PASSWORD=cmfive_test DB_DATABASE=cmfive_test DB_PORT=3306 php cmfive.php tests unit all; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Admin module tests failed"
          fi
        # Setup playwright
      - name: Setup Playwright
        run: |
          cd boilerplate/test/playwright
          npm ci
          npx playwright install --with-deps
      # Run Acceptance Tests
      - name: "Confirm Codeception setup"
        run: |        
          docker exec cmfive sh -c "ls -lah -R /var/www/html/test/Codeception/tests && cat /var/www/html/test/Codeception/*.yml && cat /var/www/html/test/Codeception/tests/*.yml"

      - name: "Run admin module tests"
        run: |
            sudo chmod 777 -R system/modules/admin/install/migrations/
            cd boilerplate/test/playwright
            npm run build
            npm run test --module="admin" --reporter="github"
            if [ $? -gt 0 ]; then
                echo "Admin module tests failed"
            fi
      - name: "Run channel module tests"
        run: |
            cd boilerplate/test/playwright
            npm run build
            npm run test --module="channel" --reporter="github"
            if [ $? -gt 0 ]; then
                echo "Channel module tests failed"
            fi
      - name: "Run form module tests"
        run: |
            cd boilerplate/test/playwright
            npm run build
            npm run test --module="form" --reporter="github"
            if [ $? -gt 0 ]; then
                echo "Form module tests failed"
            fi
      - name: "Run report module tests"
        run: |
          cd boilerplate/test/playwright
          npm run build
          npm run test --module="report" --reporter="github"
          if [ $? -gt 0 ]; then
            echo "Report module tests failed"
          fi
      - name: "Run tag module tests"
        run: |
            cd boilerplate/test/playwright
            npm run build
            npm run test --module="tag" --reporter="github"
            if [ $? -gt 0 ]; then
                echo "Tag module tests failed"
            fi
      - name: "Run task module tests"
        run: |
            cd boilerplate/test/playwright
            npm run build
            npm run test --module="task" --reporter="github"
            if [ $? -gt 0 ]; then
                echo "Task module tests failed"
            fi
      - name: "Run timelog module tests"
        run: |
            cd boilerplate/test/playwright
            npm run build
            npm run test --module="timelog" --reporter="github"
            if [ $? -gt 0 ]; then
                echo "Timelog module tests failed"
            fi

      - name: Get container healthchecks
        if: failure()
        run: |
          function check() {
            container=$1
            if docker inspect $container --format='{{.State.Health.Status}}' >/dev/null 2>&1; then
              health=$(docker inspect --format='{{json .State.Health.Status}}' $container)
              if [ "$health" != "\"healthy\"" ]; then
                echo "CONTAINER IS NOT HEALTHY"
                echo "==== STATUS ===="
                docker inspect --format='{{json .State.Health}}' $container
                echo "==== LOGS ===="
                docker logs $container
                echo "==== END ===="
              else
                echo "Container is healthy"
              fi
            else
              echo "Container does not have a health check"
            fi
          }
          check mysql-8
          check cmfive

      - name: Stop containers
        # the containers should be stopped regardless of 
        # the test result
        if: always()
        run: |
          docker stop cmfive
          docker stop mysql-8
          docker rm cmfive
          docker rm mysql-8

      # Store Test Results
      - name: Test results
        if: ${{ failure() }} || ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-output-${{matrix.node_version}}
          path: |
            test/Codeception/tests/_output/
            storage/log/
            test/playwright/test-results/
            test/playwright/playwright-report/
          retention-days: 5

      # Save composer cache from cmfive container
      - name: Save composer cache
        if: ${{ success() }}
        run: |
          docker cp cmfive:/var/www/html/.composer .composer
