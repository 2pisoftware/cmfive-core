name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop, master ]

  workflow_dispatch:
env:
  TARGET_PHP: 8.1
  TARGET_MYSQL: 8
  DB_HOST: mysql-8
  DB_USERNAME: cmfive_test
  DB_PASSWORD: cmfive_test
  DB_DATABASE: cmfive_test

jobs:
  # Lint
  php-codesniffer74:
    name: PHP CS 7.4
    runs-on: ubuntu-20.04
    steps:
    - name: Get phpcs
      run: wget https://raw.githubusercontent.com/2pisoftware/cmfive-boilerplate/master/phpcs.xml
    - name: Codesniffer
      uses: pipeline-components/php-codesniffer@v0.12.3
      with:
        options: -s -p --colors --extensions=php --runtime-set testVersion 7.4
  php-codesniffer80:
    name: PHP CS 8.0
    runs-on: ubuntu-20.04
    steps:
    - name: Get phpcs
      run: wget https://raw.githubusercontent.com/2pisoftware/cmfive-boilerplate/master/phpcs.xml
    - name: Codesniffer
      uses: pipeline-components/php-codesniffer@v0.12.3
      with:
        options: -s -p --colors --extensions=php --runtime-set testVersion 8.0
  php-codesniffer81:
    name: PHP CS 8.1
    runs-on: ubuntu-20.04
    steps:
    - name: Get phpcs
      run: wget https://raw.githubusercontent.com/2pisoftware/cmfive-boilerplate/master/phpcs.xml
    - name: Codesniffer
      uses: pipeline-components/php-codesniffer@v0.12.3
      with:
        options: -s -p --colors --extensions=php --runtime-set testVersion 8.1
  # Test
  run_test:
    # Checkout Boilerplate
    name: Unit/Acceptance tests
    runs-on: ubuntu-20.04
    needs: [ php-codesniffer74, php-codesniffer80, php-codesniffer81 ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: '2pisoftware/cmfive-boilerplate'
          ref: 'feature/PHP8.1'

      # Pre-requsites Prepare Cmfive Environment
      - name: Setup cmfive Test Environment
        run: |
          cp config.php.example config.php
          
          docker-compose up --build -d
          docker ps
          
          export DB_DATABASE=cmfive_test
          export DB_USERNAME=cmfive_test
          export DB_PASSWORD=cmfive_test
          export DB_HOST=mysql-8
          
          docker exec -t nginx-php8.1 bash -c "php cmfive.php install core ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

          docker exec -t mysql-8 bash -c "mysql -h127.0.0.1 -u root -proot --execute \"CREATE DATABASE cmfive_test; CREATE USER cmfive_test@'%' IDENTIFIED BY 'cmfive_test'; GRANT ALL PRIVILEGES ON cmfive_test.* TO cmfive_test@'%'; FLUSH PRIVILEGES;\""

          #docker exec -t nginx-php8.1 bash -c "php cmfive.php install core ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          docker exec -t nginx-php8.1 bash -c "php cmfive.php install migrations"
          docker exec -t nginx-php8.1 bash -c "php cmfive.php seed encryption"
          docker exec -t nginx-php8.1 bash -c "php cmfive.php seed admin admin admin admin@example.com admin admin"
          
          docker exec -t nginx-php8.1 bash -c "chmod -R 777 cache/ storage/ uploads/"
          
          docker start selenium314;

      - name: Inject configs into cmfive Test Environment
        run: |
          echo 'Config::set("tests", ["testrunner" => "ENABLED", "config" => '', "yaml" => ["- WebDriver:" => ["url" => "http://webapp:3000", "browser" => "chrome", "wait" => "60", "host" => "selenium314", "port" => "4444", "capabilities" => ["acceptInsecureCerts" => true, "goog:chromeOptions" => "w3c: false"]], "- Db:" => ["dsn" => "mysql:host=mysql-8;dbname=cmfive_test", "user" => "cmfive_test", "password" => "cmfive_test"], "- Asserts:" => ""]]);' >> config.php
          echo 'Config::set('system.environment', 'development');' >> config.php
          echo 'Config::set('core_template.foundation.reveal.animation', 'none');' >> config.php
          echo 'Config::set('core_template.foundation.reveal.animation_speed', 0);' >> config.php

          echo "Config::set('report.database', ['hostname' => 'mysql-8', 'username' => 'cmfive_test', 'password' => 'cmfive_test', 'database' => 'cmfive_test', 'driver' => 'mysql']);" >> config.php;
          echo "Config::set('core_template.foundation.reveal.animation_speed', 0);" >> config.php;
          echo "Config::set('core_template.foundation.reveal.animation', 'none');" >> config.php;

      - name: Prepare cmfive Test Database
        run: docker exec nginx-php8.1 bash -c "cat config.php && php cmfive.php testDB setup; exit \$?";

      # Run Unit Tests
      - name: "Run unit tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests unit all; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Admin module tests failed"
          fi

      # Run Acceptance Tests
      - name: "Run admin module tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests module admin silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Admin module tests failed"
          fi
      - name: "Run channels module tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests module channels silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Channels module tests failed"
          fi
      - name: "Run inbox module tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests module inbox silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Inbox module tests failed"
          fi
      - name: "Run report module tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests module report silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Report module tests failed"
          fi
      - name: "Run tag module tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests module tag silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Tag module tests failed"
          fi
      - name: "Run task module tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests module task silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Task module tests failed"
          fi
      - name: "Run timelog module tests"
        run: |
          docker exec nginx-php8.1 bash -c "php cmfive.php tests module timelog silent; exit \$?"
          if [ $? -gt 0 ]; then
            echo "Timelog module tests failed"
          fi

      - name: Stop containers
        # the containers should be stopped regardless of 
        # the test result
        if: always()
        run: docker-compose down

      # Store Test Results
      - name: Test results
        if: ${{ failure() }} || ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: |
            test/Codeception/tests/_output/
            storage/log/
          retention-days: 5
