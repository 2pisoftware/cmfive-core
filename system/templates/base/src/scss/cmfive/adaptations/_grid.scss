
.row-fluid {
    // @include make-row();
    // @include make-col-ready();
    margin: 0 auto;
    width: 100%;
    @include clearfix();
}

.clearfix {
    clear: both;
}

.column, .columns {
    position: relative;
    padding-left: 0.9375rem;
    padding-right: 0.9375rem;
    float: left;
}

@for $i from 1 through 12 {
    @media only screen {
        .small-#{$i} {
            // flex: 0 0 auto;
            width: (100% / 12) * $i;
        }
    }

    @media only screen {
        @include media-breakpoint-up(md) {
            .medium-#{$i} {
                // flex: 0 0 auto;
                width: (100% / 12) * $i !important;
            }
        }
    }

    @media only screen {
        @include media-breakpoint-up(lg) {
            .large-#{$i} {
                // flex: 0 0 auto;
                width: (100% / 12) * $i !important;
            }
        }
    }
}

ul[class*="-block-grid-"] {
    display: flex;
    flex-flow: row wrap;
    flex-grow: 1;
    flex-basis: 0;
    padding: 0px;

    li {
        list-style-type: none;
    }
}

@for $i from 1 through 6 {
    @media only screen {
        ul.small-block-grid-#{$i} {
            li {
                flex: 0 1 calc(100%/#{$i});
            }
        }

        @include media-breakpoint-up(md) {
            ul.medium-block-grid-#{$i} {
                li {
                    flex: 0 1 calc(100%/#{$i}) !important;
                }
            }
        }

        @include media-breakpoint-up(lg) {
            ul.large-block-grid-#{$i} {
                li {
                    flex: 0 1 calc(100%/#{$i}) !important;
                }
            }
        }
    }
}

// Foundation block grid - too complex to include

// $include-html-block-grid-classes: true !default;
// $include-xl-html-block-grid-classes: false !default;

// // We use this to control the maximum number of block grid elements per row
// $block-grid-elements: 12 !default;
// $block-grid-default-spacing: rem-calc(20) !default;

// $align-block-grid-to-grid: false !default;
// @if $align-block-grid-to-grid {
//   $block-grid-default-spacing: 1rem !default;
// }

// // Enables media queries for block-grid classes. Set to false if writing semantic HTML.
// $block-grid-media-queries: true !default;

// //
// // Block Grid Mixins
// //

// // Create a custom block grid
// //
// // $per-row - # of items to display per row. Default: false.
// // $spacing - # of ems to use as padding on each block item. Default: rem-calc(20).
// // $include-spacing - Adds padding to our list item. Default: true.
// // $base-style - Apply a base style to block grid. Default: true.
// $modules: () !default;

// @mixin exports($name) {
//     // Import from global scope
//     $modules: $modules !global;
//     // Check if a module is already on the list
//     $module_index: index($modules, $name);
//     @if (($module_index == null) or ($module_index == false)) {
//         $modules: append($modules, $name) !global;
//         @content;
//     }
// }

// @mixin block-grid(
//   $per-row:false,
//   $spacing:$block-grid-default-spacing,
//   $include-spacing:true,
//   $base-style:true) {

//   @if $base-style {
//     display: block;
//     padding: 0;
//     @if $align-block-grid-to-grid {
//       margin: 0;
//     } @else {
//       margin: 0 (-$spacing/2);
//     }
//     @include clearfix;

//     > li {
//       display: block;
//       float: left;
//       height: auto;
//       @if $include-spacing {
//         padding: 0 ($spacing/2) $spacing;
//       }
//     }
//   }

//   @if $per-row {
//     > li {
//       list-style: none;
//       @if $include-spacing {
//         padding: 0 ($spacing/2) $spacing;
//       }
//       width: 100%/$per-row;

//       &:nth-of-type(1n) { clear: none; }
//       &:nth-of-type(#{$per-row}n+1) { clear: both; }
//       @if $align-block-grid-to-grid {
//         @include block-grid-aligned($per-row, $spacing);
//       }
//     }
//   }
// }

// @mixin block-grid-aligned($per-row, $spacing) {
//   @for $i from 1 through $block-grid-elements {
//     @if $per-row >= $i {
//       $grid-column: '+' + $i;
//       @if $per-row == $i {
//         $grid-column: '';
//       }
//       &:nth-of-type(#{$per-row}n#{unquote($grid-column)}) {
//         padding-left: ($spacing - (($spacing / $per-row) * ($per-row - ($i - 1))));
//         padding-right: ($spacing - (($spacing / $per-row) * $i));
//       }
//     }
//   }
// }

// // Generate presentational markup for block grid.
// //
// // $size - Name of class to use, i.e. "large" will generate .large-block-grid-1, .large-block-grid-2, etc.
// @mixin block-grid-html-classes($size, $include-spacing) {
//   @for $i from 1 through $block-grid-elements {
//     .#{$size}-block-grid-#{($i)} {
//       @include block-grid($i, $block-grid-default-spacing, $include-spacing, false);
//     }
//   }
// }

// @include exports("block-grid") {
//   @if $include-html-block-grid-classes {

//     [class*="block-grid-"] { @include block-grid; }

//     @if $block-grid-media-queries {
//         @include media-breakpoint-up(sm) {
//             @include block-grid-html-classes($size:small, $include-spacing:false);
//         }

//         @include media-breakpoint-up(md) {
//             @include block-grid-html-classes($size:medium, $include-spacing:false);
//         }

//         @include media-breakpoint-up(lg) {
//             @include block-grid-html-classes($size:large, $include-spacing:false);
//         }

//         @include media-breakpoint-up(xl) {
//             @include block-grid-html-classes($size:xlarge, $include-spacing:false);
//         }

//         @include media-breakpoint-up(xxl) {
//             @include block-grid-html-classes($size:xxlarge, $include-spacing:false);
//         }
//     }
//   }
// }