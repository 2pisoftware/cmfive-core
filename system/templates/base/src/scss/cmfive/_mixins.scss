// @use "sass:map";

@import '../variables';

@mixin shadow-flat {
    box-shadow: 0px 4px 8px $shadow-light;
    // transition: box-shadow $animation-duration $animation-path;
    
    // &:hover {
    //     @include shadow-hover();
    // }
}

@mixin shadow-hover {
    box-shadow: 0px 16px 48px $shadow-light;
}

@mixin shadow-dark {
    box-shadow: 0px 4px 8px $shadow-dark;
    // transition: box-shadow $animation-duration $animation-path;
    
    // &:hover {
    //     @include shadow-hover();
    // }
}

@mixin shadow-dark-hover {
    box-shadow: 0px 4px 16px $shadow-dark, 0px -4px 16px $shadow-dark;
}

@mixin font-size($size) {
    font-size: map-get($font-sizes, $size) !important;
    line-height: map-get($line-heights, $size) !important;
}

@mixin clearfix() {
    // clear: both;
    &:after { 
        content: "";
        visibility: hidden;
        display: block;
        height: 0;
        clear: both;
    }
}

@mixin not-selectable() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

/**
 * @param map props - a map of properties to be themed
 * @param transitions - transitions to append
 */
@mixin theme($props, $t: null) {
    @each $theme, $map in $themes {
        .theme--#{$theme} & {
            $theme-map: () !global;
            // Build theme map
            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}');
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }
            
            @each $prop, $target in $props {
                #{$prop}: map-get($theme-map, $target) !important;
                $t: append($prop $animation-duration $animation-path + ',', $t);
            }
            transition: #{$t};
            $theme-map: null !global;
        }
    }
}

@mixin light-theme-rule($target, $rule) {
    .theme--default & {
        #{$target}: $rule !important;
    }
}

@mixin dark-theme-rule($target, $rule) {
    .theme--dark & {
        #{$target}: $rule !important;
    }
}

@mixin theme-colours() {
    &.primary {
        @include theme((background-color: 'twopi-blue', color: 'white-black'));
    }

    &.secondary {
        @include theme((background-color: 'mid-grey', color: 'white-black'));
    }

    &.success {
        @include theme((background-color: 'success', color: 'white-black'));
    }

    &.danger {
        @include theme((background-color: 'danger', color: 'white-black'));
    }

    &.error {
        @include theme((background-color: 'danger', color: 'white-black'));
    }

    &.warning {
        @include theme((background-color: 'warning', color: 'dark-grey'));
    }

    &.info {
        @include theme((background-color: 'caption', color: 'white-black'));
    }

    &.light {
        @include theme((background-color: 'light-grey', color: 'caption'));
    }

    &.dark {
        @include theme((background-color: 'dark-grey', color: 'white-black'));
    }
}

@mixin center-nth-column($n) {
    tr {
        th:nth-of-type(#{$n}),
        td:nth-of-type(#{$n}) {
            display: flex;
            justify-content: center;
            text-align: center;
        }
    }
}
